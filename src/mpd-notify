#!/usr/bin/perl 

use common::sense;

# {{{ TODO
#
# - Check mp3 file for icon. 
# 	- Not-> check cache directory for icon
# 		Not present -> try to gather from amazon
# 		Present -> display
# 	-> display
#
# }}}

# {{{ POD

=head1 AUTHOR

(c) 2010 Juan C. Muller E<lt>jcmuller@gmail.comE<gt>. All rights reserved.

=head1 DESCRIPTION

Get the data from MPD and display a notification window using Desktop::Notify.

=head1 VERSION

v0.1

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 USAGE

mpd-notify [options]

    -o, --once      Run once
    -c, --cover [args] (may appear multiple times)
                    Directory where to look for covers. The first one will
                    be used to store new ones (currently not implemented).
    -h, --mpd-host  Host name where MPD is running
    -p, --mpd-port  Port number where MPD is running
    -m, --man       Show man page
    -h, --help      Show this text
    -i, --images-from [args] (may appear multiple times)
                    If arg='list' will show all the hosts where covers can be 
                    retrieved from.

=cut
# }}}

# {{{ Defaults Class
package Defaults;

sub base_path
{
	my $base_path = "${ENV{HOME}}/.covers";
	return $base_path;
}
# }}}

# {{{ MpdNotify Class
package MpdNotify;

# {{{ Libraries
use Audio::MPD;
use Desktop::Notify;
use Getopt::Long;
use Pod::Usage;
use Time::HiRes qw(usleep);
# }}}

# {{{ new
# Common constructor
sub new
{
	my ($proto, %args) = @_;
	my $class = ref $proto || $proto;
	my $self = {};
	bless $self, $class;
	$self->_initialize(%args);
	return $self;
}
# }}}

# {{{ _collect_arguments
sub _collect_arguments
{
	my ($self) = @_;

	my %arguments;

	GetOptions(\%arguments,
		'once',
		'cover=s@',
		'mpd-host=s',
		'mpd-port=i',
		'man',
		'help',
		'images-from=s@'
	);

	$self->{arguments} = \%arguments;

	if ($self->{arguments}{help})
	{
		pod2usage(1);
	}
	elsif ($self->{arguments}{man})
	{
		pod2usage(-verbose => 2);
	}
}
# }}}

# {{{ _initialize
sub _initialize
{
	my ($self, %args) = @_;

	$self->_collect_arguments;

	# Open a connection to the notification daemon
	my $notify = Desktop::Notify->new;

	# Create notification object
	$self->{notification} = $notify->create(timeout  => 5000);

	# Open a connection to MPD, and reuse it
	my %args = (
		conntype => 'reuse',
	);

	# If there are arguments passed in from the command line modifying the MPD
	# connection, use them
	$args{host} = $self->{arguments}{'mpd-host'} if ($self->{arguments}{'mpd-host'});
	$args{port} = $self->{arguments}{'mpd-port'} if ($self->{arguments}{'mpd-port'});

	# Connect to MPD
	$self->{mpd} = Audio::MPD->new(\%args);
}
# }}}

# {{{ _get_status
sub _get_status
{
	my ($self) = @_;

	# Cache the status object
	my $_status = $self->{mpd}->status;

	# Query it
	my $random = $_status->random || 0;
	my $repeat = $_status->repeat || 0;
	my $song   = $_status->song   || 0;
	my $status = $_status->state  || 0;
	my $volume = $_status->volume || 0;

	return
		$random,
		$repeat,
		$song,
		$status,
		$volume;
}
# }}}

# {{{ _get_album_cover
sub _get_album_cover
{
	my ($self, $artist, $album) = @_;

	my $BASE_PATH = Defaults->base_path;

	my @image_types = qw(png jpg gif tif bmp);

	# Create convers directory if it doesn't exist.
	mkdir $BASE_PATH if (! -d $BASE_PATH);

	# Construct filename based on the current artist and album playing
	my $base_filename = "$BASE_PATH/${artist}_${album}";

	# Check for the existence of a file
	for my $extension (@image_types)
	{
		my $filename = "${base_filename}.${extension}";

		if ( -e $filename and ! -z $filename)
		{
			return $filename;
		}
	}

	# Otherwise, use a default image
	my $icon = "$BASE_PATH/default.png";
	return $icon;
}
# }}}

# {{{ _display
sub _display
{
	my ($self) = @_;

	# Cache the status object
	my $_status = $self->{mpd}->status;

	# Declare variables used in notification
	my $_minutes = 0;
	my $_seconds = 0;
	my $_song;
	my $_time;

	my %body_args;

	for my $arg (qw/
		album
		artist
		date
		file
		genre
		id
		pos
		time
		title
		track
		volume
		random_string
		repeat_string
		status_string
		time_string
		/)
	{
		$body_args{$arg} = '';
	}

	$body_args{status_string} = 'stopped';

	# Only attempt to get data out of the status object if MPD is not stopped
	if ($_status->state ne 'stop')
	{
		# Get song object
		$_song   = $self->{mpd}->song($_status->{song});
		# Get time object
		$_time   = $_status->time;

		# Extract number of seconds that current song runs for
		my (undef, $_t_seconds) = split /:/, $_time->time;

		$_minutes = sprintf('%02d', int ($_t_seconds / 60));
		$_seconds = sprintf('%02d', $_t_seconds - $_minutes * 60);

		# Construct a nice time string
		$body_args{time_string} = "${_minutes}:${_seconds}";

		# Construct nice status strings
		$body_args{status_string} = $_status->state eq 'play' ? 'playing' : 'paused';
		$body_args{repeat_string} = $_status->repeat ? 'on ' : 'off';
		$body_args{random_string} = $_status->random ? 'on ' : 'off';

		$body_args{volume} = $_status->volume || 0;

		# Not all of these are used currently, but they're available for
		# modifications to the format of the notification string
		for my $arg (qw/
			album
			artist
			date
			file
			genre
			id
			pos
			time
			title
			track
			/)
		{
			$body_args{$arg} = $_song->{$arg} || '';
		}
	}

	# Set notification summary line
	$self->{notification}->summary("Music Player Daemon - [$body_args{status_string}]");

	# Construct notification body text
	my $body = $self->_get_body(%body_args);

	my $icon = $self->_get_album_cover($body_args{artist}, $body_args{album});
	$self->{notification}->app_icon($icon);
	$self->{notification}->body($body);

	# Display the notification
	$self->{notification}->show;
}
# }}}

# {{{ _get_body
# Get the notification body contents. It is in its own method so that it can be
# overridden. For that to happen, the architecture of this program would need
# to change slightly. Not a lot.
sub _get_body
{
	my ($this, %args) = @_;

	my $artist      = $args{artist};
	my $album       = $args{album};
	my $time_string = $args{time_string};
	my $title       = $args{title};
	my $volume      = $args{volume};

	my $random_string = $args{random_string};
	my $repeat_string = $args{repeat_string};
	my $status_string = $args{status_string};

	return << "FINI";
$artist - $title
$album
[$status_string] $time_string
volume: ${volume}% repeat: $repeat_string random: $random_string
FINI
}
# }}}

# {{{ notify
sub notify
{
	my ($self) = @_;

	# Declare cache vars

	my $old_random;
	my $old_repeat;
	my $old_song;
	my $old_status;
	my $old_volume;

	# Loop forever
	while (1)
	{
		# Get MPD's status
		my (
			$random,
			$repeat,
			$song,
			$status,
			$volume
		) = $self->_get_status;

		# If there's been any changes...
		if (
			(!$old_song and !$old_status) or
			($old_random ne $random)      or
			($old_repeat ne $repeat)      or
			($old_song   != $song)        or
			($old_status ne $status)      or
			($old_volume != $volume)
		)
		{
			# Cache the changes and...
			$old_song   = $song;
			$old_status = $status;
			$old_volume = $volume;
			$old_random = $random;
			$old_repeat = $repeat;

			# Display a notification
			$self->_display;
		}

		last if ($self->{arguments}{once});

		usleep (500_000);
	}

	# This will probably *never* be reached, but we include it for correctness.
	# Actually, it will only be reached when the program is run with the --once
	# option enabled.
	$self->{notification}->close;
}
# }}}
# }}}

# {{{ main
package Main;

sub main
{
	$0 = 'mpd-notify';
	MpdNotify->new->notify;
}

main();
# }}}

# vim:set foldmethod=marker noexpandtab sw=4 ts=4:
